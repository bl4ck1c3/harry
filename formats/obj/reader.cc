
#line 1 "formats/obj/reader.rl"
/*
 * Copyright (C) 2017, Max von Buelow
 * TU Darmstadt - Graphics, Capture and Massively Parallel Computing
 * All rights reserved.
 *
 * This software may be modified and distributed under the terms
 * of the BSD 3-Clause license. See the LICENSE.txt file for details.
 */

#include <stdexcept>
#include <vector>
#include <string>
#include <cmath>
#include <fstream>
#include <array>

#include "reader.h"

#include "structs/mixing.h"
#include "structs/types.h"
#include "structs/quant.h"
#include "utils/io.h"
#include "utils/progress.h"

#define BUFSIZE 16384


#line 80 "formats/obj/reader.rl"


namespace obj {
namespace reader {


#line 38 "/home/max/repos/harry/formats/obj/reader.cc"
static const char _ObjParser_actions[] = {
	0, 1, 0, 1, 2, 1, 3, 1, 
	4, 1, 12, 1, 18, 1, 20, 1, 
	21, 1, 22, 1, 23, 1, 24, 1, 
	25, 1, 26, 1, 27, 1, 28, 2, 
	0, 1, 2, 0, 3, 2, 6, 17, 
	2, 7, 17, 2, 8, 17, 2, 9, 
	10, 2, 11, 12, 2, 13, 14, 2, 
	13, 15, 2, 13, 16, 2, 18, 0, 
	2, 19, 20, 2, 21, 28, 2, 22, 
	28, 2, 23, 28, 2, 24, 28, 2, 
	25, 28, 2, 27, 28, 3, 5, 6, 
	17, 3, 9, 11, 12, 3, 13, 15, 
	16, 3, 18, 0, 1, 3, 18, 0, 
	3
};

static const short _ObjParser_key_offsets[] = {
	0, 0, 4, 5, 7, 9, 14, 16, 
	21, 26, 28, 35, 42, 44, 45, 46, 
	47, 48, 49, 51, 55, 57, 58, 59, 
	60, 61, 62, 64, 68, 70, 74, 85, 
	88, 90, 96, 107, 110, 112, 118, 129, 
	132, 134, 142, 155, 156, 159, 161, 169, 
	182, 185, 187, 193, 204, 207, 209, 217, 
	230, 233, 235, 243, 256, 259, 261, 269, 
	273, 275, 277, 283, 292, 294, 296, 302, 
	304, 306, 308, 310, 314, 316, 318, 322, 
	324, 326, 332, 341, 343, 345, 351, 353, 
	355, 357, 359, 363, 365, 367, 371, 373, 
	375, 381, 390, 392, 394, 400, 402, 404, 
	406, 408, 412, 414, 416, 420, 422, 424, 
	428, 435, 437, 439, 443, 445, 447, 449, 
	451, 453, 455, 457, 459, 461, 463, 469, 
	478, 480, 482, 488, 490, 492, 494, 496, 
	500, 502, 504, 508, 510, 512, 518, 527, 
	529, 531, 537, 539, 541, 543, 545, 549, 
	551, 553, 557, 559, 561, 565, 572, 574, 
	576, 580, 582, 584, 586, 588, 590, 592, 
	594, 596, 598, 600, 604, 611, 613, 615, 
	619, 621, 623, 625, 627, 629, 631, 633, 
	635, 637, 648, 651, 653, 659, 670, 673, 
	675, 681, 692, 695, 697, 705, 709, 710, 
	712, 714, 720, 729, 731, 733, 739, 741, 
	743, 745, 747, 751, 753, 755, 759, 761, 
	763, 767, 774, 776, 778, 782, 784, 786, 
	788, 790, 792, 794, 796, 798, 800, 802, 
	806, 813, 815, 817, 821, 823, 825, 827, 
	829, 831, 833, 835, 837, 839, 850, 853, 
	855, 861, 872, 875, 877, 885, 898, 899, 
	902, 904, 912, 916, 918, 920, 926, 935, 
	937, 939, 945, 947, 949, 951, 953, 957, 
	959, 961, 965, 967, 969, 975, 984, 986, 
	988, 994, 996, 998, 1000, 1002, 1006, 1008, 
	1010, 1014, 1016, 1018, 1022, 1029, 1031, 1033, 
	1037, 1039, 1041, 1043, 1045, 1047, 1049, 1051, 
	1053, 1054, 1058, 1059, 1063, 1064, 1072, 1074, 
	1081, 1088, 1090, 1096, 1102, 1104, 1109, 1114, 
	1116, 1120, 1134, 1148, 1162, 1176, 1190, 1204
};

static const char _ObjParser_trans_keys[] = {
	9, 10, 13, 32, 10, 10, 13, 9, 
	32, 9, 32, 45, 48, 57, 48, 57, 
	9, 32, 47, 48, 57, 9, 32, 45, 
	48, 57, 48, 57, 9, 10, 13, 32, 
	47, 48, 57, 9, 10, 13, 32, 45, 
	48, 57, 9, 32, 116, 108, 108, 105, 
	98, 9, 32, 9, 10, 13, 32, 10, 
	13, 115, 101, 109, 116, 108, 9, 32, 
	9, 10, 13, 32, 10, 13, 9, 32, 
	110, 116, 9, 32, 43, 45, 46, 73, 
	78, 105, 110, 48, 57, 46, 48, 57, 
	48, 57, 9, 32, 69, 101, 48, 57, 
	9, 32, 43, 45, 46, 73, 78, 105, 
	110, 48, 57, 46, 48, 57, 48, 57, 
	9, 32, 69, 101, 48, 57, 9, 32, 
	43, 45, 46, 73, 78, 105, 110, 48, 
	57, 46, 48, 57, 48, 57, 9, 10, 
	13, 32, 69, 101, 48, 57, 9, 10, 
	13, 32, 43, 45, 46, 73, 78, 105, 
	110, 48, 57, 10, 46, 48, 57, 48, 
	57, 9, 10, 13, 32, 69, 101, 48, 
	57, 9, 10, 13, 32, 43, 45, 46, 
	73, 78, 105, 110, 48, 57, 46, 48, 
	57, 48, 57, 9, 32, 69, 101, 48, 
	57, 9, 32, 43, 45, 46, 73, 78, 
	105, 110, 48, 57, 46, 48, 57, 48, 
	57, 9, 10, 13, 32, 69, 101, 48, 
	57, 9, 10, 13, 32, 43, 45, 46, 
	73, 78, 105, 110, 48, 57, 46, 48, 
	57, 48, 57, 9, 10, 13, 32, 69, 
	101, 48, 57, 9, 10, 13, 32, 43, 
	45, 46, 73, 78, 105, 110, 48, 57, 
	46, 48, 57, 48, 57, 9, 10, 13, 
	32, 69, 101, 48, 57, 9, 10, 13, 
	32, 43, 45, 48, 57, 9, 10, 13, 
	32, 48, 57, 9, 10, 13, 32, 46, 
	69, 101, 48, 57, 78, 110, 70, 102, 
	9, 10, 13, 32, 73, 105, 78, 110, 
	73, 105, 84, 116, 89, 121, 9, 10, 
	13, 32, 65, 97, 78, 110, 9, 10, 
	13, 32, 43, 45, 48, 57, 9, 10, 
	13, 32, 48, 57, 9, 10, 13, 32, 
	46, 69, 101, 48, 57, 78, 110, 70, 
	102, 9, 10, 13, 32, 73, 105, 78, 
	110, 73, 105, 84, 116, 89, 121, 9, 
	10, 13, 32, 65, 97, 78, 110, 9, 
	10, 13, 32, 43, 45, 48, 57, 9, 
	10, 13, 32, 48, 57, 9, 10, 13, 
	32, 46, 69, 101, 48, 57, 78, 110, 
	70, 102, 9, 10, 13, 32, 73, 105, 
	78, 110, 73, 105, 84, 116, 89, 121, 
	9, 10, 13, 32, 65, 97, 78, 110, 
	9, 10, 13, 32, 43, 45, 48, 57, 
	9, 32, 48, 57, 9, 32, 46, 69, 
	101, 48, 57, 78, 110, 70, 102, 9, 
	32, 73, 105, 78, 110, 73, 105, 84, 
	116, 89, 121, 9, 32, 65, 97, 78, 
	110, 9, 32, 43, 45, 48, 57, 9, 
	10, 13, 32, 48, 57, 9, 10, 13, 
	32, 46, 69, 101, 48, 57, 78, 110, 
	70, 102, 9, 10, 13, 32, 73, 105, 
	78, 110, 73, 105, 84, 116, 89, 121, 
	9, 10, 13, 32, 65, 97, 78, 110, 
	9, 10, 13, 32, 43, 45, 48, 57, 
	9, 10, 13, 32, 48, 57, 9, 10, 
	13, 32, 46, 69, 101, 48, 57, 78, 
	110, 70, 102, 9, 10, 13, 32, 73, 
	105, 78, 110, 73, 105, 84, 116, 89, 
	121, 9, 10, 13, 32, 65, 97, 78, 
	110, 9, 10, 13, 32, 43, 45, 48, 
	57, 9, 32, 48, 57, 9, 32, 46, 
	69, 101, 48, 57, 78, 110, 70, 102, 
	9, 32, 73, 105, 78, 110, 73, 105, 
	84, 116, 89, 121, 9, 32, 65, 97, 
	78, 110, 9, 32, 43, 45, 48, 57, 
	9, 32, 48, 57, 9, 32, 46, 69, 
	101, 48, 57, 78, 110, 70, 102, 9, 
	32, 73, 105, 78, 110, 73, 105, 84, 
	116, 89, 121, 9, 32, 65, 97, 78, 
	110, 9, 32, 9, 32, 9, 32, 43, 
	45, 46, 73, 78, 105, 110, 48, 57, 
	46, 48, 57, 48, 57, 9, 32, 69, 
	101, 48, 57, 9, 32, 43, 45, 46, 
	73, 78, 105, 110, 48, 57, 46, 48, 
	57, 48, 57, 9, 32, 69, 101, 48, 
	57, 9, 32, 43, 45, 46, 73, 78, 
	105, 110, 48, 57, 46, 48, 57, 48, 
	57, 9, 10, 13, 32, 69, 101, 48, 
	57, 9, 10, 13, 32, 10, 43, 45, 
	48, 57, 9, 10, 13, 32, 48, 57, 
	9, 10, 13, 32, 46, 69, 101, 48, 
	57, 78, 110, 70, 102, 9, 10, 13, 
	32, 73, 105, 78, 110, 73, 105, 84, 
	116, 89, 121, 9, 10, 13, 32, 65, 
	97, 78, 110, 9, 10, 13, 32, 43, 
	45, 48, 57, 9, 32, 48, 57, 9, 
	32, 46, 69, 101, 48, 57, 78, 110, 
	70, 102, 9, 32, 73, 105, 78, 110, 
	73, 105, 84, 116, 89, 121, 9, 32, 
	65, 97, 78, 110, 9, 32, 43, 45, 
	48, 57, 9, 32, 48, 57, 9, 32, 
	46, 69, 101, 48, 57, 78, 110, 70, 
	102, 9, 32, 73, 105, 78, 110, 73, 
	105, 84, 116, 89, 121, 9, 32, 65, 
	97, 78, 110, 9, 32, 9, 32, 9, 
	32, 43, 45, 46, 73, 78, 105, 110, 
	48, 57, 46, 48, 57, 48, 57, 9, 
	32, 69, 101, 48, 57, 9, 32, 43, 
	45, 46, 73, 78, 105, 110, 48, 57, 
	46, 48, 57, 48, 57, 9, 10, 13, 
	32, 69, 101, 48, 57, 9, 10, 13, 
	32, 43, 45, 46, 73, 78, 105, 110, 
	48, 57, 10, 46, 48, 57, 48, 57, 
	9, 10, 13, 32, 69, 101, 48, 57, 
	9, 10, 13, 32, 43, 45, 48, 57, 
	9, 10, 13, 32, 48, 57, 9, 10, 
	13, 32, 46, 69, 101, 48, 57, 78, 
	110, 70, 102, 9, 10, 13, 32, 73, 
	105, 78, 110, 73, 105, 84, 116, 89, 
	121, 9, 10, 13, 32, 65, 97, 78, 
	110, 9, 10, 13, 32, 43, 45, 48, 
	57, 9, 10, 13, 32, 48, 57, 9, 
	10, 13, 32, 46, 69, 101, 48, 57, 
	78, 110, 70, 102, 9, 10, 13, 32, 
	73, 105, 78, 110, 73, 105, 84, 116, 
	89, 121, 9, 10, 13, 32, 65, 97, 
	78, 110, 9, 10, 13, 32, 43, 45, 
	48, 57, 9, 32, 48, 57, 9, 32, 
	46, 69, 101, 48, 57, 78, 110, 70, 
	102, 9, 32, 73, 105, 78, 110, 73, 
	105, 84, 116, 89, 121, 9, 32, 65, 
	97, 78, 110, 9, 32, 10, 9, 10, 
	13, 32, 10, 9, 10, 13, 32, 10, 
	9, 10, 13, 32, 45, 47, 48, 57, 
	48, 57, 9, 10, 13, 32, 47, 48, 
	57, 9, 10, 13, 32, 45, 48, 57, 
	48, 57, 9, 10, 13, 32, 48, 57, 
	9, 32, 45, 47, 48, 57, 48, 57, 
	9, 32, 47, 48, 57, 9, 32, 45, 
	48, 57, 48, 57, 9, 32, 48, 57, 
	9, 10, 13, 32, 35, 102, 103, 108, 
	109, 115, 117, 118, 111, 112, 9, 10, 
	13, 32, 35, 102, 103, 108, 109, 115, 
	117, 118, 111, 112, 9, 10, 13, 32, 
	35, 102, 103, 108, 109, 115, 117, 118, 
	111, 112, 9, 10, 13, 32, 35, 102, 
	103, 108, 109, 115, 117, 118, 111, 112, 
	9, 10, 13, 32, 35, 102, 103, 108, 
	109, 115, 117, 118, 111, 112, 9, 10, 
	13, 32, 35, 102, 103, 108, 109, 115, 
	117, 118, 111, 112, 9, 10, 13, 32, 
	35, 102, 103, 108, 109, 115, 117, 118, 
	111, 112, 0
};

static const char _ObjParser_single_lengths[] = {
	0, 4, 1, 2, 2, 3, 0, 3, 
	3, 0, 5, 5, 2, 1, 1, 1, 
	1, 1, 2, 4, 2, 1, 1, 1, 
	1, 1, 2, 4, 2, 4, 9, 1, 
	0, 4, 9, 1, 0, 4, 9, 1, 
	0, 6, 11, 1, 1, 0, 6, 11, 
	1, 0, 4, 9, 1, 0, 6, 11, 
	1, 0, 6, 11, 1, 0, 6, 4, 
	2, 0, 4, 7, 2, 2, 6, 2, 
	2, 2, 2, 4, 2, 2, 4, 2, 
	0, 4, 7, 2, 2, 6, 2, 2, 
	2, 2, 4, 2, 2, 4, 2, 0, 
	4, 7, 2, 2, 6, 2, 2, 2, 
	2, 4, 2, 2, 4, 2, 0, 2, 
	5, 2, 2, 4, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 0, 4, 7, 
	2, 2, 6, 2, 2, 2, 2, 4, 
	2, 2, 4, 2, 0, 4, 7, 2, 
	2, 6, 2, 2, 2, 2, 4, 2, 
	2, 4, 2, 0, 2, 5, 2, 2, 
	4, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 0, 2, 5, 2, 2, 4, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 9, 1, 0, 4, 9, 1, 0, 
	4, 9, 1, 0, 6, 4, 1, 2, 
	0, 4, 7, 2, 2, 6, 2, 2, 
	2, 2, 4, 2, 2, 4, 2, 0, 
	2, 5, 2, 2, 4, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 0, 2, 
	5, 2, 2, 4, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 9, 1, 0, 
	4, 9, 1, 0, 6, 11, 1, 1, 
	0, 6, 4, 2, 0, 4, 7, 2, 
	2, 6, 2, 2, 2, 2, 4, 2, 
	2, 4, 2, 0, 4, 7, 2, 2, 
	6, 2, 2, 2, 2, 4, 2, 2, 
	4, 2, 0, 2, 5, 2, 2, 4, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	1, 4, 1, 4, 1, 6, 0, 5, 
	5, 0, 4, 4, 0, 3, 3, 0, 
	2, 12, 12, 12, 12, 12, 12, 12
};

static const char _ObjParser_range_lengths[] = {
	0, 0, 0, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 0, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 0, 
	0, 1, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 0, 0, 0, 
	1, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 1, 
	1, 1, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 1, 
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 0, 1, 
	1, 1, 0, 0, 1, 1, 1, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 1, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1, 
	1, 1, 1, 1, 1, 1, 1, 1
};

static const short _ObjParser_index_offsets[] = {
	0, 0, 5, 7, 10, 13, 18, 20, 
	25, 30, 32, 39, 46, 49, 51, 53, 
	55, 57, 59, 62, 67, 70, 72, 74, 
	76, 78, 80, 83, 88, 91, 96, 107, 
	110, 112, 118, 129, 132, 134, 140, 151, 
	154, 156, 164, 177, 179, 182, 184, 192, 
	205, 208, 210, 216, 227, 230, 232, 240, 
	253, 256, 258, 266, 279, 282, 284, 292, 
	297, 300, 302, 308, 317, 320, 323, 330, 
	333, 336, 339, 342, 347, 350, 353, 358, 
	361, 363, 369, 378, 381, 384, 391, 394, 
	397, 400, 403, 408, 411, 414, 419, 422, 
	424, 430, 439, 442, 445, 452, 455, 458, 
	461, 464, 469, 472, 475, 480, 483, 485, 
	489, 496, 499, 502, 507, 510, 513, 516, 
	519, 522, 525, 528, 531, 534, 536, 542, 
	551, 554, 557, 564, 567, 570, 573, 576, 
	581, 584, 587, 592, 595, 597, 603, 612, 
	615, 618, 625, 628, 631, 634, 637, 642, 
	645, 648, 653, 656, 658, 662, 669, 672, 
	675, 680, 683, 686, 689, 692, 695, 698, 
	701, 704, 707, 709, 713, 720, 723, 726, 
	731, 734, 737, 740, 743, 746, 749, 752, 
	755, 758, 769, 772, 774, 780, 791, 794, 
	796, 802, 813, 816, 818, 826, 831, 833, 
	836, 838, 844, 853, 856, 859, 866, 869, 
	872, 875, 878, 883, 886, 889, 894, 897, 
	899, 903, 910, 913, 916, 921, 924, 927, 
	930, 933, 936, 939, 942, 945, 948, 950, 
	954, 961, 964, 967, 972, 975, 978, 981, 
	984, 987, 990, 993, 996, 999, 1010, 1013, 
	1015, 1021, 1032, 1035, 1037, 1045, 1058, 1060, 
	1063, 1065, 1073, 1078, 1081, 1083, 1089, 1098, 
	1101, 1104, 1111, 1114, 1117, 1120, 1123, 1128, 
	1131, 1134, 1139, 1142, 1144, 1150, 1159, 1162, 
	1165, 1172, 1175, 1178, 1181, 1184, 1189, 1192, 
	1195, 1200, 1203, 1205, 1209, 1216, 1219, 1222, 
	1227, 1230, 1233, 1236, 1239, 1242, 1245, 1248, 
	1251, 1253, 1258, 1260, 1265, 1267, 1275, 1277, 
	1284, 1291, 1293, 1299, 1305, 1307, 1312, 1317, 
	1319, 1323, 1337, 1351, 1365, 1379, 1393, 1407
};

static const short _ObjParser_trans_targs[] = {
	1, 321, 2, 1, 0, 321, 0, 321, 
	2, 3, 5, 5, 0, 5, 5, 6, 
	7, 0, 7, 0, 8, 8, 315, 7, 
	0, 8, 8, 9, 10, 0, 10, 0, 
	11, 322, 308, 11, 309, 10, 0, 11, 
	322, 308, 11, 9, 10, 0, 3, 3, 
	0, 14, 0, 15, 0, 16, 0, 17, 
	0, 18, 0, 19, 19, 0, 307, 0, 
	0, 307, 20, 323, 306, 20, 22, 0, 
	23, 0, 24, 0, 25, 0, 26, 0, 
	27, 27, 0, 305, 0, 0, 305, 28, 
	324, 304, 28, 30, 30, 184, 244, 0, 
	30, 30, 31, 31, 32, 173, 181, 173, 
	181, 172, 0, 32, 172, 0, 33, 0, 
	34, 34, 169, 169, 33, 0, 34, 34, 
	35, 35, 36, 158, 166, 158, 166, 157, 
	0, 36, 157, 0, 37, 0, 38, 38, 
	154, 154, 37, 0, 38, 38, 39, 39, 
	40, 143, 151, 143, 151, 142, 0, 40, 
	142, 0, 41, 0, 42, 325, 43, 42, 
	139, 139, 41, 0, 42, 325, 43, 42, 
	44, 44, 45, 128, 136, 128, 136, 127, 
	0, 325, 0, 45, 127, 0, 46, 0, 
	47, 325, 43, 47, 124, 124, 46, 0, 
	47, 325, 43, 47, 48, 48, 49, 113, 
	121, 113, 121, 112, 0, 49, 112, 0, 
	50, 0, 51, 51, 109, 109, 50, 0, 
	51, 51, 52, 52, 53, 98, 106, 98, 
	106, 97, 0, 53, 97, 0, 54, 0, 
	55, 325, 43, 55, 94, 94, 54, 0, 
	55, 325, 43, 55, 56, 56, 57, 83, 
	91, 83, 91, 82, 0, 57, 82, 0, 
	58, 0, 59, 325, 43, 59, 79, 79, 
	58, 0, 59, 325, 43, 59, 60, 60, 
	61, 68, 76, 68, 76, 67, 0, 61, 
	67, 0, 62, 0, 63, 325, 43, 63, 
	64, 64, 62, 0, 63, 325, 43, 63, 
	0, 65, 65, 0, 66, 0, 63, 325, 
	43, 63, 66, 0, 63, 325, 43, 63, 
	62, 64, 64, 67, 0, 69, 69, 0, 
	70, 70, 0, 63, 325, 43, 63, 71, 
	71, 0, 72, 72, 0, 73, 73, 0, 
	74, 74, 0, 75, 75, 0, 63, 325, 
	43, 63, 0, 77, 77, 0, 78, 78, 
	0, 63, 325, 43, 63, 0, 80, 80, 
	0, 81, 0, 59, 325, 43, 59, 81, 
	0, 59, 325, 43, 59, 58, 79, 79, 
	82, 0, 84, 84, 0, 85, 85, 0, 
	59, 325, 43, 59, 86, 86, 0, 87, 
	87, 0, 88, 88, 0, 89, 89, 0, 
	90, 90, 0, 59, 325, 43, 59, 0, 
	92, 92, 0, 93, 93, 0, 59, 325, 
	43, 59, 0, 95, 95, 0, 96, 0, 
	55, 325, 43, 55, 96, 0, 55, 325, 
	43, 55, 54, 94, 94, 97, 0, 99, 
	99, 0, 100, 100, 0, 55, 325, 43, 
	55, 101, 101, 0, 102, 102, 0, 103, 
	103, 0, 104, 104, 0, 105, 105, 0, 
	55, 325, 43, 55, 0, 107, 107, 0, 
	108, 108, 0, 55, 325, 43, 55, 0, 
	110, 110, 0, 111, 0, 51, 51, 111, 
	0, 51, 51, 50, 109, 109, 112, 0, 
	114, 114, 0, 115, 115, 0, 51, 51, 
	116, 116, 0, 117, 117, 0, 118, 118, 
	0, 119, 119, 0, 120, 120, 0, 51, 
	51, 0, 122, 122, 0, 123, 123, 0, 
	51, 51, 0, 125, 125, 0, 126, 0, 
	47, 325, 43, 47, 126, 0, 47, 325, 
	43, 47, 46, 124, 124, 127, 0, 129, 
	129, 0, 130, 130, 0, 47, 325, 43, 
	47, 131, 131, 0, 132, 132, 0, 133, 
	133, 0, 134, 134, 0, 135, 135, 0, 
	47, 325, 43, 47, 0, 137, 137, 0, 
	138, 138, 0, 47, 325, 43, 47, 0, 
	140, 140, 0, 141, 0, 42, 325, 43, 
	42, 141, 0, 42, 325, 43, 42, 41, 
	139, 139, 142, 0, 144, 144, 0, 145, 
	145, 0, 42, 325, 43, 42, 146, 146, 
	0, 147, 147, 0, 148, 148, 0, 149, 
	149, 0, 150, 150, 0, 42, 325, 43, 
	42, 0, 152, 152, 0, 153, 153, 0, 
	42, 325, 43, 42, 0, 155, 155, 0, 
	156, 0, 38, 38, 156, 0, 38, 38, 
	37, 154, 154, 157, 0, 159, 159, 0, 
	160, 160, 0, 38, 38, 161, 161, 0, 
	162, 162, 0, 163, 163, 0, 164, 164, 
	0, 165, 165, 0, 38, 38, 0, 167, 
	167, 0, 168, 168, 0, 38, 38, 0, 
	170, 170, 0, 171, 0, 34, 34, 171, 
	0, 34, 34, 33, 169, 169, 172, 0, 
	174, 174, 0, 175, 175, 0, 34, 34, 
	176, 176, 0, 177, 177, 0, 178, 178, 
	0, 179, 179, 0, 180, 180, 0, 34, 
	34, 0, 182, 182, 0, 183, 183, 0, 
	34, 34, 0, 185, 185, 0, 185, 185, 
	186, 186, 187, 233, 241, 233, 241, 232, 
	0, 187, 232, 0, 188, 0, 189, 189, 
	229, 229, 188, 0, 189, 189, 190, 190, 
	191, 218, 226, 218, 226, 217, 0, 191, 
	217, 0, 192, 0, 193, 193, 214, 214, 
	192, 0, 193, 193, 194, 194, 195, 203, 
	211, 203, 211, 202, 0, 195, 202, 0, 
	196, 0, 197, 326, 198, 197, 199, 199, 
	196, 0, 197, 326, 198, 197, 0, 326, 
	0, 200, 200, 0, 201, 0, 197, 326, 
	198, 197, 201, 0, 197, 326, 198, 197, 
	196, 199, 199, 202, 0, 204, 204, 0, 
	205, 205, 0, 197, 326, 198, 197, 206, 
	206, 0, 207, 207, 0, 208, 208, 0, 
	209, 209, 0, 210, 210, 0, 197, 326, 
	198, 197, 0, 212, 212, 0, 213, 213, 
	0, 197, 326, 198, 197, 0, 215, 215, 
	0, 216, 0, 193, 193, 216, 0, 193, 
	193, 192, 214, 214, 217, 0, 219, 219, 
	0, 220, 220, 0, 193, 193, 221, 221, 
	0, 222, 222, 0, 223, 223, 0, 224, 
	224, 0, 225, 225, 0, 193, 193, 0, 
	227, 227, 0, 228, 228, 0, 193, 193, 
	0, 230, 230, 0, 231, 0, 189, 189, 
	231, 0, 189, 189, 188, 229, 229, 232, 
	0, 234, 234, 0, 235, 235, 0, 189, 
	189, 236, 236, 0, 237, 237, 0, 238, 
	238, 0, 239, 239, 0, 240, 240, 0, 
	189, 189, 0, 242, 242, 0, 243, 243, 
	0, 189, 189, 0, 245, 245, 0, 245, 
	245, 246, 246, 247, 293, 301, 293, 301, 
	292, 0, 247, 292, 0, 248, 0, 249, 
	249, 289, 289, 248, 0, 249, 249, 250, 
	250, 251, 278, 286, 278, 286, 277, 0, 
	251, 277, 0, 252, 0, 253, 327, 254, 
	253, 274, 274, 252, 0, 253, 327, 254, 
	253, 255, 255, 256, 263, 271, 263, 271, 
	262, 0, 327, 0, 256, 262, 0, 257, 
	0, 258, 327, 254, 258, 259, 259, 257, 
	0, 258, 327, 254, 258, 0, 260, 260, 
	0, 261, 0, 258, 327, 254, 258, 261, 
	0, 258, 327, 254, 258, 257, 259, 259, 
	262, 0, 264, 264, 0, 265, 265, 0, 
	258, 327, 254, 258, 266, 266, 0, 267, 
	267, 0, 268, 268, 0, 269, 269, 0, 
	270, 270, 0, 258, 327, 254, 258, 0, 
	272, 272, 0, 273, 273, 0, 258, 327, 
	254, 258, 0, 275, 275, 0, 276, 0, 
	253, 327, 254, 253, 276, 0, 253, 327, 
	254, 253, 252, 274, 274, 277, 0, 279, 
	279, 0, 280, 280, 0, 253, 327, 254, 
	253, 281, 281, 0, 282, 282, 0, 283, 
	283, 0, 284, 284, 0, 285, 285, 0, 
	253, 327, 254, 253, 0, 287, 287, 0, 
	288, 288, 0, 253, 327, 254, 253, 0, 
	290, 290, 0, 291, 0, 249, 249, 291, 
	0, 249, 249, 248, 289, 289, 292, 0, 
	294, 294, 0, 295, 295, 0, 249, 249, 
	296, 296, 0, 297, 297, 0, 298, 298, 
	0, 299, 299, 0, 300, 300, 0, 249, 
	249, 0, 302, 302, 0, 303, 303, 0, 
	249, 249, 0, 324, 0, 305, 324, 304, 
	305, 28, 323, 0, 307, 323, 306, 307, 
	20, 322, 0, 11, 322, 308, 11, 310, 
	312, 311, 0, 311, 0, 11, 322, 308, 
	11, 312, 311, 0, 11, 322, 308, 11, 
	313, 314, 0, 314, 0, 11, 322, 308, 
	11, 314, 0, 8, 8, 316, 318, 317, 
	0, 317, 0, 8, 8, 318, 317, 0, 
	8, 8, 319, 320, 0, 320, 0, 8, 
	8, 320, 0, 1, 321, 2, 1, 3, 
	4, 12, 12, 13, 12, 21, 29, 12, 
	0, 1, 321, 2, 1, 3, 4, 12, 
	12, 13, 12, 21, 29, 12, 0, 1, 
	321, 2, 1, 3, 4, 12, 12, 13, 
	12, 21, 29, 12, 0, 1, 321, 2, 
	1, 3, 4, 12, 12, 13, 12, 21, 
	29, 12, 0, 1, 321, 2, 1, 3, 
	4, 12, 12, 13, 12, 21, 29, 12, 
	0, 1, 321, 2, 1, 3, 4, 12, 
	12, 13, 12, 21, 29, 12, 0, 1, 
	321, 2, 1, 3, 4, 12, 12, 13, 
	12, 21, 29, 12, 0, 0
};

static const char _ObjParser_trans_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 25, 25, 0, 25, 25, 46, 
	89, 0, 49, 0, 52, 52, 52, 9, 
	0, 0, 0, 46, 89, 0, 49, 0, 
	52, 52, 52, 52, 52, 9, 0, 0, 
	0, 0, 0, 46, 89, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 64, 0, 
	0, 64, 64, 0, 0, 13, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 64, 0, 0, 64, 64, 
	0, 0, 13, 11, 11, 0, 0, 0, 
	0, 0, 31, 31, 1, 0, 0, 0, 
	0, 34, 0, 0, 5, 0, 3, 0, 
	37, 37, 0, 0, 3, 0, 0, 0, 
	31, 31, 1, 0, 0, 0, 0, 34, 
	0, 0, 5, 0, 3, 0, 37, 37, 
	0, 0, 3, 0, 0, 0, 31, 31, 
	1, 0, 0, 0, 0, 34, 0, 0, 
	5, 0, 3, 0, 37, 37, 37, 37, 
	0, 0, 3, 0, 0, 0, 0, 0, 
	31, 31, 1, 0, 0, 0, 0, 34, 
	0, 0, 0, 0, 5, 0, 3, 0, 
	37, 37, 37, 37, 0, 0, 3, 0, 
	0, 0, 0, 0, 31, 31, 1, 0, 
	0, 0, 0, 34, 0, 0, 5, 0, 
	3, 0, 37, 37, 0, 0, 3, 0, 
	0, 0, 31, 31, 1, 0, 0, 0, 
	0, 34, 0, 0, 5, 0, 3, 0, 
	37, 37, 37, 37, 0, 0, 3, 0, 
	0, 0, 0, 0, 31, 31, 1, 0, 
	0, 0, 0, 34, 0, 0, 5, 0, 
	3, 0, 37, 37, 37, 37, 0, 0, 
	3, 0, 0, 0, 0, 0, 31, 31, 
	1, 0, 0, 0, 0, 34, 0, 0, 
	5, 0, 3, 0, 37, 37, 37, 37, 
	0, 0, 3, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 7, 0, 85, 85, 
	85, 85, 7, 0, 37, 37, 37, 37, 
	0, 0, 0, 5, 0, 0, 0, 0, 
	0, 0, 0, 43, 43, 43, 43, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 43, 43, 
	43, 43, 0, 0, 0, 0, 0, 0, 
	0, 40, 40, 40, 40, 0, 0, 0, 
	0, 7, 0, 85, 85, 85, 85, 7, 
	0, 37, 37, 37, 37, 0, 0, 0, 
	5, 0, 0, 0, 0, 0, 0, 0, 
	43, 43, 43, 43, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 43, 43, 43, 43, 0, 
	0, 0, 0, 0, 0, 0, 40, 40, 
	40, 40, 0, 0, 0, 0, 7, 0, 
	85, 85, 85, 85, 7, 0, 37, 37, 
	37, 37, 0, 0, 0, 5, 0, 0, 
	0, 0, 0, 0, 0, 43, 43, 43, 
	43, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	43, 43, 43, 43, 0, 0, 0, 0, 
	0, 0, 0, 40, 40, 40, 40, 0, 
	0, 0, 0, 7, 0, 85, 85, 7, 
	0, 37, 37, 0, 0, 0, 5, 0, 
	0, 0, 0, 0, 0, 0, 43, 43, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 43, 
	43, 0, 0, 0, 0, 0, 0, 0, 
	40, 40, 0, 0, 0, 0, 7, 0, 
	85, 85, 85, 85, 7, 0, 37, 37, 
	37, 37, 0, 0, 0, 5, 0, 0, 
	0, 0, 0, 0, 0, 43, 43, 43, 
	43, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	43, 43, 43, 43, 0, 0, 0, 0, 
	0, 0, 0, 40, 40, 40, 40, 0, 
	0, 0, 0, 7, 0, 85, 85, 85, 
	85, 7, 0, 37, 37, 37, 37, 0, 
	0, 0, 5, 0, 0, 0, 0, 0, 
	0, 0, 43, 43, 43, 43, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 43, 43, 43, 
	43, 0, 0, 0, 0, 0, 0, 0, 
	40, 40, 40, 40, 0, 0, 0, 0, 
	7, 0, 85, 85, 7, 0, 37, 37, 
	0, 0, 0, 5, 0, 0, 0, 0, 
	0, 0, 0, 43, 43, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 43, 43, 0, 0, 
	0, 0, 0, 0, 0, 40, 40, 0, 
	0, 0, 0, 7, 0, 85, 85, 7, 
	0, 37, 37, 0, 0, 0, 5, 0, 
	0, 0, 0, 0, 0, 0, 43, 43, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 43, 
	43, 0, 0, 0, 0, 0, 0, 0, 
	40, 40, 0, 0, 0, 0, 0, 0, 
	97, 97, 61, 11, 11, 11, 11, 101, 
	0, 0, 5, 0, 3, 0, 37, 37, 
	0, 0, 3, 0, 0, 0, 31, 31, 
	1, 0, 0, 0, 0, 34, 0, 0, 
	5, 0, 3, 0, 37, 37, 0, 0, 
	3, 0, 0, 0, 31, 31, 1, 0, 
	0, 0, 0, 34, 0, 0, 5, 0, 
	3, 0, 37, 37, 37, 37, 0, 0, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 7, 0, 85, 85, 
	85, 85, 7, 0, 37, 37, 37, 37, 
	0, 0, 0, 5, 0, 0, 0, 0, 
	0, 0, 0, 43, 43, 43, 43, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 43, 43, 
	43, 43, 0, 0, 0, 0, 0, 0, 
	0, 40, 40, 40, 40, 0, 0, 0, 
	0, 7, 0, 85, 85, 7, 0, 37, 
	37, 0, 0, 0, 5, 0, 0, 0, 
	0, 0, 0, 0, 43, 43, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 43, 43, 0, 
	0, 0, 0, 0, 0, 0, 40, 40, 
	0, 0, 0, 0, 7, 0, 85, 85, 
	7, 0, 37, 37, 0, 0, 0, 5, 
	0, 0, 0, 0, 0, 0, 0, 43, 
	43, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	43, 43, 0, 0, 0, 0, 0, 0, 
	0, 40, 40, 0, 0, 0, 0, 0, 
	0, 97, 97, 61, 11, 11, 11, 11, 
	101, 0, 0, 5, 0, 3, 0, 37, 
	37, 0, 0, 3, 0, 0, 0, 31, 
	31, 1, 0, 0, 0, 0, 34, 0, 
	0, 5, 0, 3, 0, 37, 37, 37, 
	37, 0, 0, 3, 0, 0, 0, 0, 
	0, 31, 31, 1, 0, 0, 0, 0, 
	34, 0, 0, 0, 0, 5, 0, 3, 
	0, 37, 37, 37, 37, 0, 0, 3, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 7, 0, 85, 85, 85, 85, 7, 
	0, 37, 37, 37, 37, 0, 0, 0, 
	5, 0, 0, 0, 0, 0, 0, 0, 
	43, 43, 43, 43, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 43, 43, 43, 43, 0, 
	0, 0, 0, 0, 0, 0, 40, 40, 
	40, 40, 0, 0, 0, 0, 7, 0, 
	85, 85, 85, 85, 7, 0, 37, 37, 
	37, 37, 0, 0, 0, 5, 0, 0, 
	0, 0, 0, 0, 0, 43, 43, 43, 
	43, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	43, 43, 43, 43, 0, 0, 0, 0, 
	0, 0, 0, 40, 40, 40, 40, 0, 
	0, 0, 0, 7, 0, 85, 85, 7, 
	0, 37, 37, 0, 0, 0, 5, 0, 
	0, 0, 0, 0, 0, 0, 43, 43, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 43, 
	43, 0, 0, 0, 0, 0, 0, 0, 
	40, 40, 0, 0, 0, 64, 0, 0, 
	64, 64, 0, 0, 64, 0, 0, 64, 
	64, 0, 0, 0, 0, 0, 0, 46, 
	0, 89, 0, 49, 0, 93, 93, 93, 
	93, 55, 9, 0, 0, 0, 0, 0, 
	46, 89, 0, 49, 0, 58, 58, 58, 
	58, 9, 0, 0, 0, 46, 0, 89, 
	0, 49, 0, 93, 93, 55, 9, 0, 
	0, 0, 46, 89, 0, 49, 0, 58, 
	58, 9, 0, 29, 29, 29, 29, 29, 
	29, 29, 29, 29, 29, 29, 29, 29, 
	0, 82, 82, 82, 82, 82, 82, 82, 
	82, 82, 82, 82, 82, 82, 0, 70, 
	70, 70, 70, 70, 70, 70, 70, 70, 
	70, 70, 70, 70, 0, 67, 67, 67, 
	67, 67, 67, 67, 67, 67, 67, 67, 
	67, 67, 0, 73, 73, 73, 73, 73, 
	73, 73, 73, 73, 73, 73, 73, 73, 
	0, 79, 79, 79, 79, 79, 79, 79, 
	79, 79, 79, 79, 79, 79, 0, 76, 
	76, 76, 76, 76, 76, 76, 76, 76, 
	76, 76, 76, 76, 0, 0
};

static const char _ObjParser_eof_actions[] = {
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 27, 17, 15, 19, 23, 21
};

static const int ObjParser_start = 321;
static const int ObjParser_first_final = 321;
static const int ObjParser_error = 0;

static const int ObjParser_en_main = 321;


#line 86 "formats/obj/reader.rl"

typedef float real;
static const mixing::Type REALMT = mixing::FLOAT;
enum Attrs { VERTEX, TEX, NORMAL };

inline int objidx(int n, int size)
{
	if (n == 0) throw std::runtime_error("index cannot be 0");
	if (n > size) throw std::runtime_error("n too big");
	if (n < 0) {
		if (size + n < 0) {
			throw std::runtime_error("n too small");
		}
		return size + n;
	}

	return n - 1;
}

static const int lut_interp[] = { mixing::POS, mixing::TEX, mixing::NORMAL };

#define IL 9
#define IR std::numeric_limits<mesh::regidx_t>::max()

struct OBJReader {
	mesh::Builder &builder;
	mesh::listidx_t attr_lists[3][9]; // VERTEX, TEX, NORMAL
	mesh::regidx_t vtx_reg[9];
	std::vector<std::array<mesh::regidx_t, 256>> face_regs;
	std::vector<std::pair<mesh::listidx_t, mesh::attridx_t>> tex_loc, normal_loc;
	std::string base;
	std::unordered_map<std::string, int> mtls;
	int cur_mtl;

	OBJReader(mesh::Builder &_builder) : builder(_builder),
		attr_lists{ { IL, IL, IL, IL, IL, IL, IL, IL, IL }, { IL, IL, IL, IL, IL, IL, IL, IL, IL }, { IL, IL, IL, IL, IL, IL, IL, IL, IL } },
		vtx_reg{ IR, IR, IR, IR, IR, IR, IR, IR, IR }
	{
		cur_mtl = 0;
		face_regs.emplace_back();
		for (int i = 0; i < 256; ++i) {
			face_regs[0][i] = IR;
		}
	}

	// helper methods
	int init_attr(Attrs attr, int n)
	{
		mesh::listidx_t &list = attr_lists[attr][n];
		if (list == IL) {
			mixing::Fmt fmt;
			mixing::Interps interps;
			for (int i = 0; i < n; ++i) {
				fmt.add(REALMT);
				int interp = lut_interp[attr];
				if (attr == VERTEX && n > 4)
					interp = n == 8 && i >= 4 || i >= 3 ? mixing::COLOR : interp;
				interps.append(interp, i);
			}
			list = builder.add_list(fmt, interps, attr == VERTEX ? mesh::attr::VTX : mesh::attr::CORNER);
		}
		return list;
	}
	mesh::attridx_t write_attr(int list, real *coords, int n)
	{
		mesh::attridx_t row = builder.alloc_attr(list);
		for (int i = 0; i < n; ++i) {
			unsigned char *dst = builder.elem(list, row, i);
			std::copy((unsigned char*)(coords + i), (unsigned char*)(coords + i + 1), dst);
		}
		return row;
	}

	// OBJ methods
	void usemtl(const std::string &name)
	{
		std::unordered_map<std::string, int>::iterator it = mtls.find(name);
		if (it == mtls.end()) {
			// Mtl does not exist. Use default mtl.
			cur_mtl = 0;
		} else {
			cur_mtl = it->second;
		}
	}
	void mtllib(const std::string &name)
	{
		std::ifstream is(util::join_path(base, name));
		if (!is) return;
		while (!is.eof()) {
			// TODO: implement region attributes
			std::string id;
			is >> id;
			if (id == "newmtl") {
				std::string name;
				is >> name;
				mtls[name] = face_regs.size();
				face_regs.emplace_back();
				for (int i = 0; i < 256; ++i) {
					face_regs.back()[i] = IR;
				}
			} else {
				util::skip_line(is);
			}
		}
	}
	void vertex(real *coords, int n)
	{
		mesh::listidx_t list = init_attr(VERTEX, n);
		mesh::attridx_t aidx = write_attr(list, coords, n);

		mesh::regidx_t r = vtx_reg[n];
		if (r == IR) {
			r = vtx_reg[n] = builder.add_vtx_region(1);
			builder.bind_reg_vtxlist(r, 0, list);
		}
		mesh::vtxidx_t vidx = builder.alloc_vtx();
		builder.vtx_reg(vidx, r);
		builder.bind_vtx_attr(vidx, 0, aidx);
	}
	void tex(real *coords, int n)
	{
		mesh::listidx_t list = init_attr(TEX, n);
		mesh::attridx_t aidx = write_attr(list, coords, n);
		tex_loc.push_back(std::make_pair(list, aidx));
	}
	void normal(real *coords, int n)
	{
		mesh::listidx_t list = init_attr(NORMAL, n);
		mesh::attridx_t aidx = write_attr(list, coords, n);
		normal_loc.push_back(std::make_pair(list, aidx));
	}
	void face(int *vi, bool has_t, int *ti, bool has_n, int *ni, int corners)
	{
		mesh::listidx_t tex_l = IL, normal_l = IL;

		if (has_t) tex_l = tex_loc[ti[0]].first;
		if (has_n) normal_l = normal_loc[ni[0]].first;

		for (int c = 1; c < corners; ++c) {
			if (has_t && tex_loc[ti[c]].first != tex_l) throw std::runtime_error("Inconsistent texture attribute types in face");
			if (has_n && normal_loc[ni[c]].first != normal_l) throw std::runtime_error("Inconsistent normal attribute types in face");
		}

		int reglookup = (tex_l << 3) | normal_l;
		mesh::regidx_t r = face_regs[cur_mtl][reglookup];
		mesh::listidx_t num_attrs = (mesh::listidx_t)has_t + (mesh::listidx_t)has_n;
		mesh::listidx_t tex_a = 0, normal_a = (mesh::listidx_t)has_t;
		if (r == IR) {
			r = face_regs[cur_mtl][reglookup] = builder.add_face_region(0, num_attrs);
			if (has_t) builder.bind_reg_cornerlist(r, tex_a, tex_l);
			if (has_n) builder.bind_reg_cornerlist(r, normal_a, normal_l);
		}

		// add face
		mesh::faceidx_t fidx = builder.alloc_face(1, corners);
		builder.face_reg(fidx, r);
		builder.face_begin(corners);
		for (int i = 0; i < corners; ++i) {
			builder.set_org(vi[i]);
			if (has_t) builder.bind_corner_attr(fidx, i, tex_a, tex_loc[ti[i]].second);
			if (has_n) builder.bind_corner_attr(fidx, i, normal_a, normal_loc[ni[i]].second);
		}
		builder.face_end();
	}

	// reader
	void read_obj(std::istream &is, const std::string &dir)
	{
		base = dir;
		progress::handle prog;
		prog.start(util::linenum_approx(is));
		builder.init_bindings(0, 1, 2);

		double fraction, denom, sign, val, exp, expmul;
		int idx, idx_sign;
		std::vector<int> fi[3];
		real coords[8];
		int ncoord;
		int vi[3] = { 0 };
		int line = 0;
		std::string name;

		char buf[BUFSIZE];
		int cs;

		
#line 988 "/home/max/repos/harry/formats/obj/reader.cc"
	{
	cs = ObjParser_start;
	}

#line 272 "formats/obj/reader.rl"

		while (!is.eof()) {
			char *p = buf;
			is.read(p, BUFSIZE);
			char *pe = p + is.gcount();
			char *eof = is.eof() ? pe : nullptr;

			
#line 1002 "/home/max/repos/harry/formats/obj/reader.cc"
	{
	int _klen;
	unsigned int _trans;
	const char *_acts;
	unsigned int _nacts;
	const char *_keys;

	if ( p == pe )
		goto _test_eof;
	if ( cs == 0 )
		goto _out;
_resume:
	_keys = _ObjParser_trans_keys + _ObjParser_key_offsets[cs];
	_trans = _ObjParser_index_offsets[cs];

	_klen = _ObjParser_single_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + _klen - 1;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + ((_upper-_lower) >> 1);
			if ( (*p) < *_mid )
				_upper = _mid - 1;
			else if ( (*p) > *_mid )
				_lower = _mid + 1;
			else {
				_trans += (unsigned int)(_mid - _keys);
				goto _match;
			}
		}
		_keys += _klen;
		_trans += _klen;
	}

	_klen = _ObjParser_range_lengths[cs];
	if ( _klen > 0 ) {
		const char *_lower = _keys;
		const char *_mid;
		const char *_upper = _keys + (_klen<<1) - 2;
		while (1) {
			if ( _upper < _lower )
				break;

			_mid = _lower + (((_upper-_lower) >> 1) & ~1);
			if ( (*p) < _mid[0] )
				_upper = _mid - 2;
			else if ( (*p) > _mid[1] )
				_lower = _mid + 2;
			else {
				_trans += (unsigned int)((_mid - _keys)>>1);
				goto _match;
			}
		}
		_trans += _klen;
	}

_match:
	cs = _ObjParser_trans_targs[_trans];

	if ( _ObjParser_trans_actions[_trans] == 0 )
		goto _again;

	_acts = _ObjParser_actions + _ObjParser_trans_actions[_trans];
	_nacts = (unsigned int) *_acts++;
	while ( _nacts-- > 0 )
	{
		switch ( *_acts++ )
		{
	case 0:
#line 32 "formats/obj/reader.rl"
	{ sign = 1; val = 0; fraction = 0; denom = 1; exp = 0; expmul = 1; }
	break;
	case 1:
#line 33 "formats/obj/reader.rl"
	{ sign = (*p) == '-' ? -1 : 1; }
	break;
	case 2:
#line 34 "formats/obj/reader.rl"
	{ fraction *= 10; fraction += (*p) - '0'; denom *= 10; }
	break;
	case 3:
#line 35 "formats/obj/reader.rl"
	{ val *= 10; val += (*p) - '0'; }
	break;
	case 4:
#line 36 "formats/obj/reader.rl"
	{ exp *= 10; exp += (*p) - '0'; }
	break;
	case 5:
#line 37 "formats/obj/reader.rl"
	{ expmul = std::pow(10.0, exp); }
	break;
	case 6:
#line 38 "formats/obj/reader.rl"
	{ val += fraction / denom; val *= sign * expmul; }
	break;
	case 7:
#line 39 "formats/obj/reader.rl"
	{ val = NAN; }
	break;
	case 8:
#line 40 "formats/obj/reader.rl"
	{ val = INFINITY * sign; }
	break;
	case 9:
#line 52 "formats/obj/reader.rl"
	{ idx_sign = 0; }
	break;
	case 10:
#line 52 "formats/obj/reader.rl"
	{ idx_sign = 1; }
	break;
	case 11:
#line 52 "formats/obj/reader.rl"
	{ idx = 0; }
	break;
	case 12:
#line 52 "formats/obj/reader.rl"
	{ idx *= 10; idx += (*p) - '0'; }
	break;
	case 13:
#line 52 "formats/obj/reader.rl"
	{ idx = idx_sign ? -idx : idx; }
	break;
	case 14:
#line 54 "formats/obj/reader.rl"
	{ fi[VERTEX].push_back(objidx(idx, vi[VERTEX])); }
	break;
	case 15:
#line 55 "formats/obj/reader.rl"
	{ fi[TEX].push_back(objidx(idx, vi[TEX])); }
	break;
	case 16:
#line 56 "formats/obj/reader.rl"
	{ fi[NORMAL].push_back(objidx(idx, vi[NORMAL])); }
	break;
	case 17:
#line 58 "formats/obj/reader.rl"
	{ coords[ncoord++] = val; }
	break;
	case 18:
#line 59 "formats/obj/reader.rl"
	{ ncoord = 0; }
	break;
	case 19:
#line 63 "formats/obj/reader.rl"
	{ name.clear(); }
	break;
	case 20:
#line 63 "formats/obj/reader.rl"
	{ name += (*p); }
	break;
	case 21:
#line 65 "formats/obj/reader.rl"
	{ usemtl(name); }
	break;
	case 22:
#line 66 "formats/obj/reader.rl"
	{ mtllib(name); }
	break;
	case 23:
#line 67 "formats/obj/reader.rl"
	{ ++vi[VERTEX]; vertex(coords, ncoord); }
	break;
	case 24:
#line 68 "formats/obj/reader.rl"
	{ ++vi[TEX]; tex(coords, ncoord); }
	break;
	case 25:
#line 69 "formats/obj/reader.rl"
	{ ++vi[NORMAL]; normal(coords, ncoord); }
	break;
	case 26:
#line 70 "formats/obj/reader.rl"
	{ fi[0].clear(); fi[1].clear(); fi[2].clear(); }
	break;
	case 27:
#line 70 "formats/obj/reader.rl"
	{ face(fi[VERTEX].data(), !fi[TEX].empty(), fi[TEX].data(), !fi[NORMAL].empty(), fi[NORMAL].data(), fi[VERTEX].size()); }
	break;
	case 28:
#line 79 "formats/obj/reader.rl"
	{ prog(line++); }
	break;
#line 1191 "/home/max/repos/harry/formats/obj/reader.cc"
		}
	}

_again:
	if ( cs == 0 )
		goto _out;
	if ( ++p != pe )
		goto _resume;
	_test_eof: {}
	if ( p == eof )
	{
	const char *__acts = _ObjParser_actions + _ObjParser_eof_actions[cs];
	unsigned int __nacts = (unsigned int) *__acts++;
	while ( __nacts-- > 0 ) {
		switch ( *__acts++ ) {
	case 21:
#line 65 "formats/obj/reader.rl"
	{ usemtl(name); }
	break;
	case 22:
#line 66 "formats/obj/reader.rl"
	{ mtllib(name); }
	break;
	case 23:
#line 67 "formats/obj/reader.rl"
	{ ++vi[VERTEX]; vertex(coords, ncoord); }
	break;
	case 24:
#line 68 "formats/obj/reader.rl"
	{ ++vi[TEX]; tex(coords, ncoord); }
	break;
	case 25:
#line 69 "formats/obj/reader.rl"
	{ ++vi[NORMAL]; normal(coords, ncoord); }
	break;
	case 27:
#line 70 "formats/obj/reader.rl"
	{ face(fi[VERTEX].data(), !fi[TEX].empty(), fi[TEX].data(), !fi[NORMAL].empty(), fi[NORMAL].data(), fi[VERTEX].size()); }
	break;
#line 1231 "/home/max/repos/harry/formats/obj/reader.cc"
		}
	}
	}

	_out: {}
	}

#line 280 "formats/obj/reader.rl"

			if (cs == ObjParser_error) throw std::runtime_error("Unable to parse this OBJ file");
		}
		prog.end();
	}
};

void read(std::istream &is, const std::string &dir, mesh::Mesh &mesh)
{
	mesh::Builder builder(mesh);

	OBJReader reader(builder);
	reader.read_obj(is, dir);

	quant::set_bounds(mesh.attrs);

	std::cout << "Used face regions: " << mesh.attrs.num_regs_face() << std::endl;
	std::cout << "Used vertex regions: " << mesh.attrs.num_regs_vtx() << std::endl;
}

}
}

